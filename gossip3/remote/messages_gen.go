package remote

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *ActorPID) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Address":
			z.Address, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Address")
				return
			}
		case "Id":
			z.Id, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z ActorPID) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Address"
	err = en.Append(0x82, 0xa7, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	if err != nil {
		return
	}
	err = en.WriteString(z.Address)
	if err != nil {
		err = msgp.WrapError(err, "Address")
		return
	}
	// write "Id"
	err = en.Append(0xa2, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.Id)
	if err != nil {
		err = msgp.WrapError(err, "Id")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ActorPID) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Address"
	o = append(o, 0x82, 0xa7, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	o = msgp.AppendString(o, z.Address)
	// string "Id"
	o = append(o, 0xa2, 0x49, 0x64)
	o = msgp.AppendString(o, z.Id)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ActorPID) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Address":
			z.Address, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Address")
				return
			}
		case "Id":
			z.Id, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ActorPID) Msgsize() (s int) {
	s = 1 + 8 + msgp.StringPrefixSize + len(z.Address) + 3 + msgp.StringPrefixSize + len(z.Id)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *WireDelivery) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Header":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Header")
				return
			}
			if z.Header == nil {
				z.Header = make(map[string]string, zb0002)
			} else if len(z.Header) > 0 {
				for key := range z.Header {
					delete(z.Header, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 string
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Header")
					return
				}
				za0002, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Header", za0001)
					return
				}
				z.Header[za0001] = za0002
			}
		case "Message":
			z.Message, err = dc.ReadBytes(z.Message)
			if err != nil {
				err = msgp.WrapError(err, "Message")
				return
			}
		case "Type":
			z.Type, err = dc.ReadInt8()
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		case "Target":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Target")
					return
				}
				z.Target = nil
			} else {
				if z.Target == nil {
					z.Target = new(ActorPID)
				}
				var zb0003 uint32
				zb0003, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Target")
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "Target")
						return
					}
					switch msgp.UnsafeString(field) {
					case "Address":
						z.Target.Address, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "Target", "Address")
							return
						}
					case "Id":
						z.Target.Id, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "Target", "Id")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "Target")
							return
						}
					}
				}
			}
		case "Sender":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Sender")
					return
				}
				z.Sender = nil
			} else {
				if z.Sender == nil {
					z.Sender = new(ActorPID)
				}
				var zb0004 uint32
				zb0004, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Sender")
					return
				}
				for zb0004 > 0 {
					zb0004--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "Sender")
						return
					}
					switch msgp.UnsafeString(field) {
					case "Address":
						z.Sender.Address, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "Sender", "Address")
							return
						}
					case "Id":
						z.Sender.Id, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "Sender", "Id")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "Sender")
							return
						}
					}
				}
			}
		case "SerializedContext":
			var zb0005 uint32
			zb0005, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "SerializedContext")
				return
			}
			if z.SerializedContext == nil {
				z.SerializedContext = make(map[string]string, zb0005)
			} else if len(z.SerializedContext) > 0 {
				for key := range z.SerializedContext {
					delete(z.SerializedContext, key)
				}
			}
			for zb0005 > 0 {
				zb0005--
				var za0003 string
				var za0004 string
				za0003, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "SerializedContext")
					return
				}
				za0004, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "SerializedContext", za0003)
					return
				}
				z.SerializedContext[za0003] = za0004
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *WireDelivery) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "Header"
	err = en.Append(0x86, 0xa6, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Header)))
	if err != nil {
		err = msgp.WrapError(err, "Header")
		return
	}
	for za0001, za0002 := range z.Header {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "Header")
			return
		}
		err = en.WriteString(za0002)
		if err != nil {
			err = msgp.WrapError(err, "Header", za0001)
			return
		}
	}
	// write "Message"
	err = en.Append(0xa7, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Message)
	if err != nil {
		err = msgp.WrapError(err, "Message")
		return
	}
	// write "Type"
	err = en.Append(0xa4, 0x54, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt8(z.Type)
	if err != nil {
		err = msgp.WrapError(err, "Type")
		return
	}
	// write "Target"
	err = en.Append(0xa6, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74)
	if err != nil {
		return
	}
	if z.Target == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// map header, size 2
		// write "Address"
		err = en.Append(0x82, 0xa7, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
		if err != nil {
			return
		}
		err = en.WriteString(z.Target.Address)
		if err != nil {
			err = msgp.WrapError(err, "Target", "Address")
			return
		}
		// write "Id"
		err = en.Append(0xa2, 0x49, 0x64)
		if err != nil {
			return
		}
		err = en.WriteString(z.Target.Id)
		if err != nil {
			err = msgp.WrapError(err, "Target", "Id")
			return
		}
	}
	// write "Sender"
	err = en.Append(0xa6, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72)
	if err != nil {
		return
	}
	if z.Sender == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// map header, size 2
		// write "Address"
		err = en.Append(0x82, 0xa7, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
		if err != nil {
			return
		}
		err = en.WriteString(z.Sender.Address)
		if err != nil {
			err = msgp.WrapError(err, "Sender", "Address")
			return
		}
		// write "Id"
		err = en.Append(0xa2, 0x49, 0x64)
		if err != nil {
			return
		}
		err = en.WriteString(z.Sender.Id)
		if err != nil {
			err = msgp.WrapError(err, "Sender", "Id")
			return
		}
	}
	// write "SerializedContext"
	err = en.Append(0xb1, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.SerializedContext)))
	if err != nil {
		err = msgp.WrapError(err, "SerializedContext")
		return
	}
	for za0003, za0004 := range z.SerializedContext {
		err = en.WriteString(za0003)
		if err != nil {
			err = msgp.WrapError(err, "SerializedContext")
			return
		}
		err = en.WriteString(za0004)
		if err != nil {
			err = msgp.WrapError(err, "SerializedContext", za0003)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *WireDelivery) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "Header"
	o = append(o, 0x86, 0xa6, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72)
	o = msgp.AppendMapHeader(o, uint32(len(z.Header)))
	for za0001, za0002 := range z.Header {
		o = msgp.AppendString(o, za0001)
		o = msgp.AppendString(o, za0002)
	}
	// string "Message"
	o = append(o, 0xa7, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65)
	o = msgp.AppendBytes(o, z.Message)
	// string "Type"
	o = append(o, 0xa4, 0x54, 0x79, 0x70, 0x65)
	o = msgp.AppendInt8(o, z.Type)
	// string "Target"
	o = append(o, 0xa6, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74)
	if z.Target == nil {
		o = msgp.AppendNil(o)
	} else {
		// map header, size 2
		// string "Address"
		o = append(o, 0x82, 0xa7, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
		o = msgp.AppendString(o, z.Target.Address)
		// string "Id"
		o = append(o, 0xa2, 0x49, 0x64)
		o = msgp.AppendString(o, z.Target.Id)
	}
	// string "Sender"
	o = append(o, 0xa6, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72)
	if z.Sender == nil {
		o = msgp.AppendNil(o)
	} else {
		// map header, size 2
		// string "Address"
		o = append(o, 0x82, 0xa7, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
		o = msgp.AppendString(o, z.Sender.Address)
		// string "Id"
		o = append(o, 0xa2, 0x49, 0x64)
		o = msgp.AppendString(o, z.Sender.Id)
	}
	// string "SerializedContext"
	o = append(o, 0xb1, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74)
	o = msgp.AppendMapHeader(o, uint32(len(z.SerializedContext)))
	for za0003, za0004 := range z.SerializedContext {
		o = msgp.AppendString(o, za0003)
		o = msgp.AppendString(o, za0004)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *WireDelivery) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Header":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Header")
				return
			}
			if z.Header == nil {
				z.Header = make(map[string]string, zb0002)
			} else if len(z.Header) > 0 {
				for key := range z.Header {
					delete(z.Header, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 string
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Header")
					return
				}
				za0002, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Header", za0001)
					return
				}
				z.Header[za0001] = za0002
			}
		case "Message":
			z.Message, bts, err = msgp.ReadBytesBytes(bts, z.Message)
			if err != nil {
				err = msgp.WrapError(err, "Message")
				return
			}
		case "Type":
			z.Type, bts, err = msgp.ReadInt8Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		case "Target":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Target = nil
			} else {
				if z.Target == nil {
					z.Target = new(ActorPID)
				}
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Target")
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Target")
						return
					}
					switch msgp.UnsafeString(field) {
					case "Address":
						z.Target.Address, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Target", "Address")
							return
						}
					case "Id":
						z.Target.Id, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Target", "Id")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Target")
							return
						}
					}
				}
			}
		case "Sender":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Sender = nil
			} else {
				if z.Sender == nil {
					z.Sender = new(ActorPID)
				}
				var zb0004 uint32
				zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Sender")
					return
				}
				for zb0004 > 0 {
					zb0004--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Sender")
						return
					}
					switch msgp.UnsafeString(field) {
					case "Address":
						z.Sender.Address, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Sender", "Address")
							return
						}
					case "Id":
						z.Sender.Id, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Sender", "Id")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Sender")
							return
						}
					}
				}
			}
		case "SerializedContext":
			var zb0005 uint32
			zb0005, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SerializedContext")
				return
			}
			if z.SerializedContext == nil {
				z.SerializedContext = make(map[string]string, zb0005)
			} else if len(z.SerializedContext) > 0 {
				for key := range z.SerializedContext {
					delete(z.SerializedContext, key)
				}
			}
			for zb0005 > 0 {
				var za0003 string
				var za0004 string
				zb0005--
				za0003, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SerializedContext")
					return
				}
				za0004, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SerializedContext", za0003)
					return
				}
				z.SerializedContext[za0003] = za0004
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *WireDelivery) Msgsize() (s int) {
	s = 1 + 7 + msgp.MapHeaderSize
	if z.Header != nil {
		for za0001, za0002 := range z.Header {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.StringPrefixSize + len(za0002)
		}
	}
	s += 8 + msgp.BytesPrefixSize + len(z.Message) + 5 + msgp.Int8Size + 7
	if z.Target == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 8 + msgp.StringPrefixSize + len(z.Target.Address) + 3 + msgp.StringPrefixSize + len(z.Target.Id)
	}
	s += 7
	if z.Sender == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 8 + msgp.StringPrefixSize + len(z.Sender.Address) + 3 + msgp.StringPrefixSize + len(z.Sender.Id)
	}
	s += 18 + msgp.MapHeaderSize
	if z.SerializedContext != nil {
		for za0003, za0004 := range z.SerializedContext {
			_ = za0004
			s += msgp.StringPrefixSize + len(za0003) + msgp.StringPrefixSize + len(za0004)
		}
	}
	return
}
